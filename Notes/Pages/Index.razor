@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@page "/"
<PageTitle>mdNotes</PageTitle>

<div class="w-full h-full">
    <div class="flex flex-col w-full h-full">
        <div class="flex items-center bg-zinc-950 border-b-2 border-zinc-800">
            <div class="pl-2">
                <!-- <span>Use Markdown!</span> --> 
                <!--<p>Value: @inputValue</p> -->
                <input class="bg-zinc-950" type="text" @bind="@State.Md.ActiveNote.Title" @oninput="OnHandleChangeTitlearea"/>
            </div>
            <div class="ml-auto">
                <button type="button"
                    class="p-2 py-3 border-l border-zinc-800 hover:bg-zinc-800 @(isPreview ? "bg-zinc-900" :"")"
                    @onclick="@(() => isPreview = !isPreview)">Preview</button>
            </div>
        </div>
        <div class="w-full grow flex">
            <textarea @bind="@State.Md.ActiveNote.Text" class="p-4 outline-none resize-none bg-transparent @(isPreview ? "w-1/2" : "grow")"
                @oninput="OnHandleChangeTextarea">@State.Md.ActiveNote.Text</textarea>
            <div
                class="p-4 bg-zinc-950 animate-fade-left animate-once animate-ease-in-out @(isPreview ? "w-1/2" : "hidden")">
                <HtmlPreview MD="@State.Md.ActiveNote.Text"></HtmlPreview>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isPreview = false;

    [Parameter]
    public Action<ChangeEventArgs>? HandleChangeTextarea { get; set; }

    [Parameter]
    public Action<ChangeEventArgs>? HandleChangeTitlearea { get; set; }

    private void OnHandleChangeTitlearea(ChangeEventArgs e)
    {
        HandleChangeTitlearea?.Invoke(e);
    }

    private void OnHandleChangeTextarea(ChangeEventArgs e) {
        HandleChangeTextarea?.Invoke(e);
    }
}