@using Notes.Data
@inject MoodyService moodyService

<div class="container-fluid">
    <button @onclick=@NewNote>addNew</button>
    <ul>
        @for (int i = 0; i < moodyService.GetNotes().Count(); i++)
        {
            int index = i;
            int id = moodyService.GetNotes()[i].Id;

            string str = moodyService.GetNotes()[i].Title;
            bool isLast = index == moodyService.GetNotes().Count - 1;
            bool isActive = id == moodyService.Md?.ActiveNoteId;

            <li class="@(isLast ? "" : "mb-2")">
                <button class="p-4 flex w-full hover:bg-zinc-700 @(isActive ? "bg-zinc-900" : "")" @onclick="@(() => HandleChangeActiveNoteId(moodyService.GetNotes()[index]))">@isActive @isLast @moodyService.GetNotes()[index].Title</button>
            </li>
        }
    </ul>
    <!-- <p>@moodyService.Md.ActiveNote.Text</p> --->
</div>

@code {
    private MoodyData childData = new();

    [Parameter]
    public EventCallback<MoodyData> OnDataChanged { get; set; }

    private async Task HandleDataChanged()
    {
        await OnDataChanged.InvokeAsync(childData);
    }

    private void NewNote()
    {
        moodyService.AddToNotes(new MoodyData() { Id = 1 + moodyService.GetNotes().Count() });
    }

    private void HandleChangeActiveNoteId(MoodyData moodyData)
    {
        // Update ActiveNote directly
        moodyService.Md.ActiveNote = moodyData;

        // Update ActiveNoteId
        moodyService.Md.ActiveNoteId = moodyData.Id;
        childData = moodyData;

        // Invoke the event handler to notify the parent
        HandleDataChanged();
    }
}
