<div class="flex flex-col grow">
    <button @onclick="@OnHandleCreateNote" class="p-3 flex bg-zinc-900 hover:bg-zinc-700 w-full font-bold border-b border-zinc-700">Create New</button>
    <div class="grow overflow-y-auto">
        <ul>
            @for (int i = 0; i < State.Notes.Count(); i++)
            {
                int index = i;
                MoodyData Note = State.Notes[i];

                bool isLast = index == State.Notes.Count() - 1;
                bool isActive = Note.Id == State.Md.ActiveNote.Id;

                <li class="@(isLast ? "" : "border-b border-zinc-700")">
                    <button class="p-4 flex w-full hover:bg-zinc-700 @(isActive ? "bg-zinc-900" : "")"
                        @onclick="@(() => OnHandleChangeActiveNote(Note))">@Note.Title</button>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    [Parameter]
    public Action<MoodyData>? HandleChangeActiveNote { get; set; }

    private void OnHandleChangeActiveNote(MoodyData moodyData)
    {
        HandleChangeActiveNote?.Invoke(moodyData);
    }

    [Parameter]
    public Action? HandleCreateNote { get; set; }

    private void OnHandleCreateNote()
    {
        HandleCreateNote?.Invoke();
    }

    private async Task LoadMoodyDataAsync()
    {
        var storageResult = await Storage.GetAsync<List<MoodyData>>("MdNotes");
        if (storageResult.Success)
        {
            State.Notes.AddRange(storageResult.Value);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoodyDataAsync();
        }
    }
}
